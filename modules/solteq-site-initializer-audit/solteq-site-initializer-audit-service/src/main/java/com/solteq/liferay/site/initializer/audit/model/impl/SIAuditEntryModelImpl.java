/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */
package com.solteq.liferay.site.initializer.audit.model.impl;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.solteq.liferay.site.initializer.audit.model.SIAuditEntry;
import com.solteq.liferay.site.initializer.audit.model.SIAuditEntryModel;

/**
 * The base model implementation for the SIAuditEntry service. Represents a row in the &quot;sq_SIAuditEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SIAuditEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SIAuditEntryImpl}.
 * </p>
 *
 * @author Solteq
 * @see SIAuditEntryImpl
 * @generated
 */
public class SIAuditEntryModelImpl extends BaseModelImpl<SIAuditEntry> implements SIAuditEntryModel {

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a si audit entry model instance should use the <code>SIAuditEntry</code> interface instead.
     */
    public static final String TABLE_NAME = "sq_SIAuditEntry";

    public static final Object[][] TABLE_COLUMNS = {
        {"siAuditEntryId", Types.BIGINT}, {"groupId", Types.BIGINT},
        {"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
        {"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
        {"siKey", Types.VARCHAR}, {"processingTime", Types.BIGINT},
        {"status", Types.INTEGER}, {"message", Types.VARCHAR}
    };

    public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

    static {
        TABLE_COLUMNS_MAP.put("siAuditEntryId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("siKey", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("processingTime", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
        TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
    }

    public static final String TABLE_SQL_CREATE =
            "create table sq_SIAuditEntry (siAuditEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,siKey VARCHAR(75) null,processingTime LONG,status INTEGER,message VARCHAR(2000) null)";

    public static final String TABLE_SQL_DROP = "drop table sq_SIAuditEntry";

    public static final String ORDER_BY_JPQL = " ORDER BY siAuditEntry.createDate DESC";

    public static final String ORDER_BY_SQL = " ORDER BY sq_SIAuditEntry.createDate DESC";

    public static final String DATA_SOURCE = "liferayDataSource";

    public static final String SESSION_FACTORY = "liferaySessionFactory";

    public static final String TX_MANAGER = "liferayTransactionManager";

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long GROUPID_COLUMN_BITMASK = 1L;

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     *		#getColumnBitmask(String)}
     */
    @Deprecated
    public static final long CREATEDATE_COLUMN_BITMASK = 2L;

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setEntityCacheEnabled(boolean entityCacheEnabled) {}

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setFinderCacheEnabled(boolean finderCacheEnabled) {}

    public SIAuditEntryModelImpl() {}

    @Override
    public long getPrimaryKey() {
        return _siAuditEntryId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setSiAuditEntryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _siAuditEntryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SIAuditEntry.class;
    }

    @Override
    public String getModelClassName() {
        return SIAuditEntry.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        Map<String, Function<SIAuditEntry, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

        for (Map.Entry<String, Function<SIAuditEntry, Object>> entry : attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<SIAuditEntry, Object> attributeGetterFunction = entry.getValue();

            attributes.put(attributeName, attributeGetterFunction.apply((SIAuditEntry) this));
        }

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Map<String, BiConsumer<SIAuditEntry, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

        for (Map.Entry<String, Object> entry : attributes.entrySet()) {
            String attributeName = entry.getKey();

            BiConsumer<SIAuditEntry, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

            if (attributeSetterBiConsumer != null) {
                attributeSetterBiConsumer.accept((SIAuditEntry) this, entry.getValue());
            }
        }
    }

    public Map<String, Function<SIAuditEntry, Object>> getAttributeGetterFunctions() {

        return AttributeGetterFunctionsHolder._attributeGetterFunctions;
    }

    public Map<String, BiConsumer<SIAuditEntry, Object>> getAttributeSetterBiConsumers() {

        return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
    }

    private static class AttributeGetterFunctionsHolder {

        private static final Map<String, Function<SIAuditEntry, Object>> _attributeGetterFunctions;

        static {
            Map<String, Function<SIAuditEntry, Object>> attributeGetterFunctions =
                    new LinkedHashMap<String, Function<SIAuditEntry, Object>>();

            attributeGetterFunctions.put("siAuditEntryId", SIAuditEntry::getSiAuditEntryId);
            attributeGetterFunctions.put("groupId", SIAuditEntry::getGroupId);
            attributeGetterFunctions.put("companyId", SIAuditEntry::getCompanyId);
            attributeGetterFunctions.put("userId", SIAuditEntry::getUserId);
            attributeGetterFunctions.put("userName", SIAuditEntry::getUserName);
            attributeGetterFunctions.put("createDate", SIAuditEntry::getCreateDate);
            attributeGetterFunctions.put("siKey", SIAuditEntry::getSiKey);
            attributeGetterFunctions.put("processingTime", SIAuditEntry::getProcessingTime);
            attributeGetterFunctions.put("status", SIAuditEntry::getStatus);
            attributeGetterFunctions.put("message", SIAuditEntry::getMessage);

            _attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
        }
    }

    private static class AttributeSetterBiConsumersHolder {

        private static final Map<String, BiConsumer<SIAuditEntry, Object>> _attributeSetterBiConsumers;

        static {
            Map<String, BiConsumer<SIAuditEntry, ?>> attributeSetterBiConsumers =
                    new LinkedHashMap<String, BiConsumer<SIAuditEntry, ?>>();

            attributeSetterBiConsumers.put(
                    "siAuditEntryId", (BiConsumer<SIAuditEntry, Long>) SIAuditEntry::setSiAuditEntryId);
            attributeSetterBiConsumers.put("groupId", (BiConsumer<SIAuditEntry, Long>) SIAuditEntry::setGroupId);
            attributeSetterBiConsumers.put("companyId", (BiConsumer<SIAuditEntry, Long>) SIAuditEntry::setCompanyId);
            attributeSetterBiConsumers.put("userId", (BiConsumer<SIAuditEntry, Long>) SIAuditEntry::setUserId);
            attributeSetterBiConsumers.put("userName", (BiConsumer<SIAuditEntry, String>) SIAuditEntry::setUserName);
            attributeSetterBiConsumers.put("createDate", (BiConsumer<SIAuditEntry, Date>) SIAuditEntry::setCreateDate);
            attributeSetterBiConsumers.put("siKey", (BiConsumer<SIAuditEntry, String>) SIAuditEntry::setSiKey);
            attributeSetterBiConsumers.put(
                    "processingTime", (BiConsumer<SIAuditEntry, Long>) SIAuditEntry::setProcessingTime);
            attributeSetterBiConsumers.put("status", (BiConsumer<SIAuditEntry, Integer>) SIAuditEntry::setStatus);
            attributeSetterBiConsumers.put("message", (BiConsumer<SIAuditEntry, String>) SIAuditEntry::setMessage);

            _attributeSetterBiConsumers = Collections.unmodifiableMap((Map) attributeSetterBiConsumers);
        }
    }

    @Override
    public long getSiAuditEntryId() {
        return _siAuditEntryId;
    }

    @Override
    public void setSiAuditEntryId(long siAuditEntryId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _siAuditEntryId = siAuditEntryId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _groupId = groupId;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     *             #getColumnOriginalValue(String)}
     */
    @Deprecated
    public long getOriginalGroupId() {
        return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() {
        try {
            User user = UserLocalServiceUtil.getUserById(getUserId());

            return user.getUuid();
        } catch (PortalException portalException) {
            return "";
        }
    }

    @Override
    public void setUserUuid(String userUuid) {}

    @Override
    public String getUserName() {
        if (_userName == null) {
            return "";
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _createDate = createDate;
    }

    @Override
    public String getSiKey() {
        if (_siKey == null) {
            return "";
        } else {
            return _siKey;
        }
    }

    @Override
    public void setSiKey(String siKey) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _siKey = siKey;
    }

    @Override
    public long getProcessingTime() {
        return _processingTime;
    }

    @Override
    public void setProcessingTime(long processingTime) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _processingTime = processingTime;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _status = status;
    }

    @Override
    public String getMessage() {
        if (_message == null) {
            return "";
        } else {
            return _message;
        }
    }

    @Override
    public void setMessage(String message) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _message = message;
    }

    public long getColumnBitmask() {
        if (_columnBitmask > 0) {
            return _columnBitmask;
        }

        if ((_columnOriginalValues == null) || (_columnOriginalValues == Collections.EMPTY_MAP)) {

            return 0;
        }

        for (Map.Entry<String, Object> entry : _columnOriginalValues.entrySet()) {

            if (!Objects.equals(entry.getValue(), getColumnValue(entry.getKey()))) {

                _columnBitmask |= _columnBitmasks.get(entry.getKey());
            }
        }

        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(), SIAuditEntry.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SIAuditEntry toEscapedModel() {
        if (_escapedModel == null) {
            Function<InvocationHandler, SIAuditEntry> escapedModelProxyProviderFunction =
                    EscapedModelProxyProviderFunctionHolder._escapedModelProxyProviderFunction;

            _escapedModel = escapedModelProxyProviderFunction.apply(new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SIAuditEntryImpl siAuditEntryImpl = new SIAuditEntryImpl();

        siAuditEntryImpl.setSiAuditEntryId(getSiAuditEntryId());
        siAuditEntryImpl.setGroupId(getGroupId());
        siAuditEntryImpl.setCompanyId(getCompanyId());
        siAuditEntryImpl.setUserId(getUserId());
        siAuditEntryImpl.setUserName(getUserName());
        siAuditEntryImpl.setCreateDate(getCreateDate());
        siAuditEntryImpl.setSiKey(getSiKey());
        siAuditEntryImpl.setProcessingTime(getProcessingTime());
        siAuditEntryImpl.setStatus(getStatus());
        siAuditEntryImpl.setMessage(getMessage());

        siAuditEntryImpl.resetOriginalValues();

        return siAuditEntryImpl;
    }

    @Override
    public SIAuditEntry cloneWithOriginalValues() {
        SIAuditEntryImpl siAuditEntryImpl = new SIAuditEntryImpl();

        siAuditEntryImpl.setSiAuditEntryId(this.<Long>getColumnOriginalValue("siAuditEntryId"));
        siAuditEntryImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
        siAuditEntryImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
        siAuditEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
        siAuditEntryImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
        siAuditEntryImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
        siAuditEntryImpl.setSiKey(this.<String>getColumnOriginalValue("siKey"));
        siAuditEntryImpl.setProcessingTime(this.<Long>getColumnOriginalValue("processingTime"));
        siAuditEntryImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
        siAuditEntryImpl.setMessage(this.<String>getColumnOriginalValue("message"));

        return siAuditEntryImpl;
    }

    @Override
    public int compareTo(SIAuditEntry siAuditEntry) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), siAuditEntry.getCreateDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }

        if (!(object instanceof SIAuditEntry)) {
            return false;
        }

        SIAuditEntry siAuditEntry = (SIAuditEntry) object;

        long primaryKey = siAuditEntry.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isEntityCacheEnabled() {
        return true;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isFinderCacheEnabled() {
        return true;
    }

    @Override
    public void resetOriginalValues() {
        _columnOriginalValues = Collections.emptyMap();

        _columnBitmask = 0;
    }

    @Override
    public CacheModel<SIAuditEntry> toCacheModel() {
        SIAuditEntryCacheModel siAuditEntryCacheModel = new SIAuditEntryCacheModel();

        siAuditEntryCacheModel.siAuditEntryId = getSiAuditEntryId();

        siAuditEntryCacheModel.groupId = getGroupId();

        siAuditEntryCacheModel.companyId = getCompanyId();

        siAuditEntryCacheModel.userId = getUserId();

        siAuditEntryCacheModel.userName = getUserName();

        String userName = siAuditEntryCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            siAuditEntryCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            siAuditEntryCacheModel.createDate = createDate.getTime();
        } else {
            siAuditEntryCacheModel.createDate = Long.MIN_VALUE;
        }

        siAuditEntryCacheModel.siKey = getSiKey();

        String siKey = siAuditEntryCacheModel.siKey;

        if ((siKey != null) && (siKey.length() == 0)) {
            siAuditEntryCacheModel.siKey = null;
        }

        siAuditEntryCacheModel.processingTime = getProcessingTime();

        siAuditEntryCacheModel.status = getStatus();

        siAuditEntryCacheModel.message = getMessage();

        String message = siAuditEntryCacheModel.message;

        if ((message != null) && (message.length() == 0)) {
            siAuditEntryCacheModel.message = null;
        }

        return siAuditEntryCacheModel;
    }

    @Override
    public String toString() {
        Map<String, Function<SIAuditEntry, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

        StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) + 2);

        sb.append("{");

        for (Map.Entry<String, Function<SIAuditEntry, Object>> entry : attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<SIAuditEntry, Object> attributeGetterFunction = entry.getValue();

            sb.append("\"");
            sb.append(attributeName);
            sb.append("\": ");

            Object value = attributeGetterFunction.apply((SIAuditEntry) this);

            if (value == null) {
                sb.append("null");
            } else if (value instanceof Blob
                    || value instanceof Date
                    || value instanceof Map
                    || value instanceof String) {

                sb.append("\"" + StringUtil.replace(value.toString(), "\"", "'") + "\"");
            } else {
                sb.append(value);
            }

            sb.append(", ");
        }

        if (sb.index() > 1) {
            sb.setIndex(sb.index() - 1);
        }

        sb.append("}");

        return sb.toString();
    }

    private static class EscapedModelProxyProviderFunctionHolder {

        private static final Function<InvocationHandler, SIAuditEntry> _escapedModelProxyProviderFunction =
                ProxyUtil.getProxyProviderFunction(SIAuditEntry.class, ModelWrapper.class);
    }

    private long _siAuditEntryId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userName;
    private Date _createDate;
    private String _siKey;
    private long _processingTime;
    private int _status;
    private String _message;

    public <T> T getColumnValue(String columnName) {
        Function<SIAuditEntry, Object> function =
                AttributeGetterFunctionsHolder._attributeGetterFunctions.get(columnName);

        if (function == null) {
            throw new IllegalArgumentException("No attribute getter function found for " + columnName);
        }

        return (T) function.apply((SIAuditEntry) this);
    }

    public <T> T getColumnOriginalValue(String columnName) {
        if (_columnOriginalValues == null) {
            return null;
        }

        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        return (T) _columnOriginalValues.get(columnName);
    }

    private void _setColumnOriginalValues() {
        _columnOriginalValues = new HashMap<String, Object>();

        _columnOriginalValues.put("siAuditEntryId", _siAuditEntryId);
        _columnOriginalValues.put("groupId", _groupId);
        _columnOriginalValues.put("companyId", _companyId);
        _columnOriginalValues.put("userId", _userId);
        _columnOriginalValues.put("userName", _userName);
        _columnOriginalValues.put("createDate", _createDate);
        _columnOriginalValues.put("siKey", _siKey);
        _columnOriginalValues.put("processingTime", _processingTime);
        _columnOriginalValues.put("status", _status);
        _columnOriginalValues.put("message", _message);
    }

    private transient Map<String, Object> _columnOriginalValues;

    public static long getColumnBitmask(String columnName) {
        return _columnBitmasks.get(columnName);
    }

    private static final Map<String, Long> _columnBitmasks;

    static {
        Map<String, Long> columnBitmasks = new HashMap<>();

        columnBitmasks.put("siAuditEntryId", 1L);

        columnBitmasks.put("groupId", 2L);

        columnBitmasks.put("companyId", 4L);

        columnBitmasks.put("userId", 8L);

        columnBitmasks.put("userName", 16L);

        columnBitmasks.put("createDate", 32L);

        columnBitmasks.put("siKey", 64L);

        columnBitmasks.put("processingTime", 128L);

        columnBitmasks.put("status", 256L);

        columnBitmasks.put("message", 512L);

        _columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
    }

    private long _columnBitmask;
    private SIAuditEntry _escapedModel;
}
