/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */
package com.solteq.liferay.site.initializer.audit.service.base;

import java.io.Serializable;
import java.sql.Connection;
import java.util.List;
import javax.sql.DataSource;

import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.CurrentConnectionUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;

import com.solteq.liferay.site.initializer.audit.model.SIAuditEntry;
import com.solteq.liferay.site.initializer.audit.service.SIAuditEntryLocalService;
import com.solteq.liferay.site.initializer.audit.service.persistence.SIAuditEntryPersistence;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the si audit entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.solteq.liferay.site.initializer.audit.service.impl.SIAuditEntryLocalServiceImpl}.
 * </p>
 *
 * @author Solteq
 * @see com.solteq.liferay.site.initializer.audit.service.impl.SIAuditEntryLocalServiceImpl
 * @generated
 */
public abstract class SIAuditEntryLocalServiceBaseImpl extends BaseLocalServiceImpl
        implements AopService, IdentifiableOSGiService, SIAuditEntryLocalService {

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Use <code>SIAuditEntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.solteq.liferay.site.initializer.audit.service.SIAuditEntryLocalServiceUtil</code>.
     */

    /**
     * Adds the si audit entry to the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect SIAuditEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param siAuditEntry the si audit entry
     * @return the si audit entry that was added
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public SIAuditEntry addSIAuditEntry(SIAuditEntry siAuditEntry) {
        siAuditEntry.setNew(true);

        return siAuditEntryPersistence.update(siAuditEntry);
    }

    /**
     * Creates a new si audit entry with the primary key. Does not add the si audit entry to the database.
     *
     * @param siAuditEntryId the primary key for the new si audit entry
     * @return the new si audit entry
     */
    @Override
    @Transactional(enabled = false)
    public SIAuditEntry createSIAuditEntry(long siAuditEntryId) {
        return siAuditEntryPersistence.create(siAuditEntryId);
    }

    /**
     * Deletes the si audit entry with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect SIAuditEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param siAuditEntryId the primary key of the si audit entry
     * @return the si audit entry that was removed
     * @throws PortalException if a si audit entry with the primary key could not be found
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public SIAuditEntry deleteSIAuditEntry(long siAuditEntryId) throws PortalException {

        return siAuditEntryPersistence.remove(siAuditEntryId);
    }

    /**
     * Deletes the si audit entry from the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect SIAuditEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param siAuditEntry the si audit entry
     * @return the si audit entry that was removed
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public SIAuditEntry deleteSIAuditEntry(SIAuditEntry siAuditEntry) {
        return siAuditEntryPersistence.remove(siAuditEntry);
    }

    @Override
    public <T> T dslQuery(DSLQuery dslQuery) {
        return siAuditEntryPersistence.dslQuery(dslQuery);
    }

    @Override
    public int dslQueryCount(DSLQuery dslQuery) {
        Long count = dslQuery(dslQuery);

        return count.intValue();
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(SIAuditEntry.class, clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
        return siAuditEntryPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.solteq.liferay.site.initializer.audit.model.impl.SIAuditEntryModelImpl</code>.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start, int end) {

        return siAuditEntryPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.solteq.liferay.site.initializer.audit.model.impl.SIAuditEntryModelImpl</code>.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(
            DynamicQuery dynamicQuery, int start, int end, OrderByComparator<T> orderByComparator) {

        return siAuditEntryPersistence.findWithDynamicQuery(dynamicQuery, start, end, orderByComparator);
    }

    /**
     * Returns the number of rows matching the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows matching the dynamic query
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery) {
        return siAuditEntryPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows matching the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows matching the dynamic query
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery, Projection projection) {

        return siAuditEntryPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public SIAuditEntry fetchSIAuditEntry(long siAuditEntryId) {
        return siAuditEntryPersistence.fetchByPrimaryKey(siAuditEntryId);
    }

    /**
     * Returns the si audit entry with the primary key.
     *
     * @param siAuditEntryId the primary key of the si audit entry
     * @return the si audit entry
     * @throws PortalException if a si audit entry with the primary key could not be found
     */
    @Override
    public SIAuditEntry getSIAuditEntry(long siAuditEntryId) throws PortalException {

        return siAuditEntryPersistence.findByPrimaryKey(siAuditEntryId);
    }

    @Override
    public ActionableDynamicQuery getActionableDynamicQuery() {
        ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

        actionableDynamicQuery.setBaseLocalService(siAuditEntryLocalService);
        actionableDynamicQuery.setClassLoader(getClassLoader());
        actionableDynamicQuery.setModelClass(SIAuditEntry.class);

        actionableDynamicQuery.setPrimaryKeyPropertyName("siAuditEntryId");

        return actionableDynamicQuery;
    }

    @Override
    public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {

        IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

        indexableActionableDynamicQuery.setBaseLocalService(siAuditEntryLocalService);
        indexableActionableDynamicQuery.setClassLoader(getClassLoader());
        indexableActionableDynamicQuery.setModelClass(SIAuditEntry.class);

        indexableActionableDynamicQuery.setPrimaryKeyPropertyName("siAuditEntryId");

        return indexableActionableDynamicQuery;
    }

    protected void initActionableDynamicQuery(ActionableDynamicQuery actionableDynamicQuery) {

        actionableDynamicQuery.setBaseLocalService(siAuditEntryLocalService);
        actionableDynamicQuery.setClassLoader(getClassLoader());
        actionableDynamicQuery.setModelClass(SIAuditEntry.class);

        actionableDynamicQuery.setPrimaryKeyPropertyName("siAuditEntryId");
    }

    /**
     * @throws PortalException
     */
    @Override
    public PersistedModel createPersistedModel(Serializable primaryKeyObj) throws PortalException {

        return siAuditEntryPersistence.create(((Long) primaryKeyObj).longValue());
    }

    /**
     * @throws PortalException
     */
    @Override
    public PersistedModel deletePersistedModel(PersistedModel persistedModel) throws PortalException {

        if (_log.isWarnEnabled()) {
            _log.warn("Implement SIAuditEntryLocalServiceImpl#deleteSIAuditEntry(SIAuditEntry) to avoid orphaned data");
        }

        return siAuditEntryLocalService.deleteSIAuditEntry((SIAuditEntry) persistedModel);
    }

    @Override
    public BasePersistence<SIAuditEntry> getBasePersistence() {
        return siAuditEntryPersistence;
    }

    /**
     * @throws PortalException
     */
    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj) throws PortalException {

        return siAuditEntryPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the si audit entries.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.solteq.liferay.site.initializer.audit.model.impl.SIAuditEntryModelImpl</code>.
     * </p>
     *
     * @param start the lower bound of the range of si audit entries
     * @param end the upper bound of the range of si audit entries (not inclusive)
     * @return the range of si audit entries
     */
    @Override
    public List<SIAuditEntry> getSIAuditEntries(int start, int end) {
        return siAuditEntryPersistence.findAll(start, end);
    }

    /**
     * Returns the number of si audit entries.
     *
     * @return the number of si audit entries
     */
    @Override
    public int getSIAuditEntriesCount() {
        return siAuditEntryPersistence.countAll();
    }

    /**
     * Updates the si audit entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect SIAuditEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param siAuditEntry the si audit entry
     * @return the si audit entry that was updated
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public SIAuditEntry updateSIAuditEntry(SIAuditEntry siAuditEntry) {
        return siAuditEntryPersistence.update(siAuditEntry);
    }

    @Deactivate
    protected void deactivate() {}

    @Override
    public Class<?>[] getAopInterfaces() {
        return new Class<?>[] {
            SIAuditEntryLocalService.class, IdentifiableOSGiService.class, PersistedModelLocalService.class
        };
    }

    @Override
    public void setAopProxy(Object aopProxy) {
        siAuditEntryLocalService = (SIAuditEntryLocalService) aopProxy;
    }

    /**
     * Returns the OSGi service identifier.
     *
     * @return the OSGi service identifier
     */
    @Override
    public String getOSGiServiceIdentifier() {
        return SIAuditEntryLocalService.class.getName();
    }

    protected Class<?> getModelClass() {
        return SIAuditEntry.class;
    }

    protected String getModelClassName() {
        return SIAuditEntry.class.getName();
    }

    /**
     * Performs a SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) {
        DataSource dataSource = siAuditEntryPersistence.getDataSource();

        DB db = DBManagerUtil.getDB();

        Connection currentConnection = CurrentConnectionUtil.getConnection(dataSource);

        try {
            if (currentConnection != null) {
                db.runSQL(currentConnection, new String[] {sql});

                return;
            }

            try (Connection connection = dataSource.getConnection()) {
                db.runSQL(connection, new String[] {sql});
            }
        } catch (Exception exception) {
            throw new SystemException(exception);
        }
    }

    protected SIAuditEntryLocalService siAuditEntryLocalService;

    @Reference
    protected SIAuditEntryPersistence siAuditEntryPersistence;

    @Reference
    protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.UserLocalService userLocalService;

    private static final Log _log = LogFactoryUtil.getLog(SIAuditEntryLocalServiceBaseImpl.class);
}
